#!/usr/bin/env python3
"""danotes
danotes .dan format notes writer
"""

import argparse

# ./danotes --help
# ./danotes block --help
# ./danotes block write --help
# ./danotes block write --text -b 02

## ----------------------------------------------------------------------------
# @section CLI_HANDLER_FUNCTIONS


def block_show(json, text, buid, label, filename):
    """Show a determined Dan Block Object"""
    print(f"Showing {json=} {text=} {buid=} {label=} {filename=}")


def block_write(json, text, buid, label, filename):
    """Write in-place a determined Dan Block Object"""
    print(f"Writing {json=} {text=} {buid=} {label=} {filename=}")


def link_show(json, text, buid, label, filename):
    """Show a determined Dan link Object"""
    print(f"Showing {json=} {text=} {buid=} {label=} {filename=}")


def link_write(json, text, buid, label, filename):
    """Write in-place a determined Dan link Object"""
    print(f"Writing {json=} {text=} {buid=} {label=} {filename=}")


## EOF EOF EOF CLI_HANDLER_FUNCTIONS 
## ----------------------------------------------------------------------------


## ----------------------------------------------------------------------------
# @section TOP_LEVEL_PARSER

parser = argparse.ArgumentParser(
    prog="danotes",
    description=__doc__,
    formatter_class=argparse.RawDescriptionHelpFormatter
)

subparsers = parser.add_subparsers(dest="command", required=True, help="Top-level command")


## EOF EOF EOF TOP_LEVEL_PARSER 
## ----------------------------------------------------------------------------





## ----------------------------------------------------------------------------
# @section BLOCK

block_parser = subparsers.add_parser("block", help="Dan Block Objects Operations")
block_subparsers = block_parser.add_subparsers(dest="subcommand", required=True)

# block show
block_show_parser = block_subparsers.add_parser("show", help=block_show.__doc__, description=block_show.__doc__)
block_show_parser_outputtype = block_show_parser.add_mutually_exclusive_group()
block_show_parser_outputtype.add_argument("--json", action="store_true", default=False)
block_show_parser_outputtype.add_argument("--text", action="store_true", default=True)

block_show_parser_filterby = block_show_parser.add_mutually_exclusive_group(required=True)
block_show_parser_filterby.add_argument("-b", "--buid")
block_show_parser_filterby.add_argument("-l", "--label")

block_show_parser.add_argument("filename", nargs="?", help="Path to .dan file (or stdin if omitted)")

# block write
block_write_parser = block_subparsers.add_parser("write", help=block_write.__doc__, description=block_write.__doc__)

block_write_parser_outputtype = block_write_parser.add_mutually_exclusive_group()
block_write_parser_outputtype.add_argument("--json", action="store_true", default=False)
block_write_parser_outputtype.add_argument("--text", action="store_true", default=True)

block_write_parser_filterby = block_write_parser.add_mutually_exclusive_group(required=True)
block_write_parser_filterby.add_argument("-b", "--buid")
block_write_parser_filterby.add_argument("-l", "--label")

block_write_parser.add_argument("filename", nargs="?", help="Path to .dan file (or stdin if omitted)")

## EOF EOF EOF BLOCK 
## ----------------------------------------------------------------------------




## ----------------------------------------------------------------------------
# @section LINK

link_parser = subparsers.add_parser("link", help="Dan Link Objects Operations")
link_subparsers = link_parser.add_subparsers(dest="subcommand", required=True)

# link show
link_show_parser = link_subparsers.add_parser("show", help=link_show.__doc__, description=link_show.__doc__)

link_show_parser_outputtype = link_show_parser.add_mutually_exclusive_group()
link_show_parser_outputtype.add_argument("--json", action="store_true", default=False)
link_show_parser_outputtype.add_argument("--text", action="store_true", default=True)

link_show_parser_filterby = link_show_parser.add_mutually_exclusive_group(required=True)
link_show_parser_filterby.add_argument("-b", "--buid")
link_show_parser_filterby.add_argument("-l", "--label")

link_show_parser.add_argument("filename", nargs="?", help="Path to .dan file (or stdin if omitted)")

# link write
link_write_parser = link_subparsers.add_parser("write", help=link_write.__doc__, description=link_write.__doc__)

link_write_parser_outputtype = link_write_parser.add_mutually_exclusive_group()
link_write_parser_outputtype.add_argument("--json", action="store_true", default=False)
link_write_parser_outputtype.add_argument("--text", action="store_true", default=True)

link_write_parser_filterby =  link_write_parser.add_mutually_exclusive_group(required=True)
link_write_parser_filterby.add_argument("-b", "--buid")
link_write_parser_filterby.add_argument("-l", "--label")

link_write_parser.add_argument("filename", nargs="?", help="Path to .dan file (or stdin if omitted)")

## EOF EOF EOF LINK 
## ----------------------------------------------------------------------------




## ----------------------------------------------------------------------------
# @section PARSE_AND_DISPATCH

args = parser.parse_args()

if args.command == "block":
    if args.subcommand == "show":
        block_show(args.json, args.text, args.buid, args.label, args.filename)
    elif args.subcommand == "write":
        block_write(args.json, args.text, args.buid, args.label, args.filename)

elif args.command == "link":
    if args.subcommand == "show":
        link_show(args.json, args.text, args.buid, args.label, args.filename)
    elif args.subcommand == "write":
        link_write(args.json, args.text, args.buid, args.label, args.filename)


## EOF EOF EOF PARSE_AND_DISPATCH 
## ----------------------------------------------------------------------------
